<#
.SYNOPSIS
    Generate bookmarks.js from bookmarks.json for local file compatibility.

.DESCRIPTION
    This script reads the bookmarks.json file and creates a bookmarks.js file
    that can be loaded by the webpage when running from local files (file:// protocol).

.PARAMETER InputFile
    Path to the input JSON file. Defaults to 'bookmarks.json' in the current directory.

.PARAMETER OutputFile
    Path to the output JavaScript file. Defaults to 'bookmarks.js' in the current directory.

.EXAMPLE
    .\Generate-BookmarksJS.ps1
    Generates bookmarks.js from bookmarks.json using default file names.

.EXAMPLE
    .\Generate-BookmarksJS.ps1 -InputFile "my-bookmarks.json" -OutputFile "my-bookmarks.js"
    Generates JavaScript file from custom input file.

.NOTES
    Author: Corporate Bookmarks App
    Version: 1.0
    Requires: PowerShell 5.0 or later
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory = $false)]
    [string]$InputFile = "bookmarks.json",
    
    [Parameter(Mandatory = $false)]
    [string]$OutputFile = "bookmarks.js",
    
    [Parameter(Mandatory = $false)]
    [switch]$Help
)

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    
    $colorMap = @{
        "Green" = "Green"
        "Red" = "Red"
        "Yellow" = "Yellow"
        "Cyan" = "Cyan"
        "Magenta" = "Magenta"
        "Blue" = "Blue"
        "White" = "White"
    }
    
    if ($colorMap.ContainsKey($Color)) {
        Write-Host $Message -ForegroundColor $colorMap[$Color]
    } else {
        Write-Host $Message
    }
}

function Test-JsonSyntax {
    param(
        [string]$JsonContent
    )
    
    try {
        $null = $JsonContent | ConvertFrom-Json
        return $true
    }
    catch {
        return $false
    }
}

function Generate-BookmarksJS {
    param(
        [string]$InputPath,
        [string]$OutputPath
    )
    
    # Check if input file exists
    if (-not (Test-Path $InputPath)) {
        Write-ColorOutput "ERROR: $InputPath file not found!" "Red"
        Write-ColorOutput "   Please ensure $InputPath is in the same directory as this script." "Yellow"
        return $false
    }
    
    try {
        # Read the JSON file
        Write-ColorOutput "Reading $InputPath..." "Cyan"
        $jsonContent = Get-Content -Path $InputPath -Raw -Encoding UTF8
        
        # Validate JSON syntax
        if (-not (Test-JsonSyntax -JsonContent $jsonContent)) {
            Write-ColorOutput "ERROR: Invalid JSON syntax in $InputPath" "Red"
            Write-ColorOutput "   Please check your JSON syntax and try again." "Yellow"
            return $false
        }
        
        # Parse JSON to ensure it's valid and get formatted output
        $bookmarksData = $jsonContent | ConvertFrom-Json
        $formattedJson = $bookmarksData | ConvertTo-Json -Depth 10 -Compress:$false
        
        # Generate the JavaScript file content
        $jsContent = @"
// Bookmarks data in JavaScript format for local file compatibility
// This file is automatically generated from $InputFile
// Edit $InputFile and regenerate this file to update bookmarks

window.bookmarkApp.loadBookmarksData($formattedJson);
"@
        
        # Write the JavaScript file
        Write-ColorOutput "Writing $OutputPath..." "Cyan"
        $jsContent | Out-File -FilePath $OutputPath -Encoding UTF8
        
        # Get file sizes for reporting
        $inputSize = [math]::Round((Get-Item $InputPath).Length / 1KB, 2)
        $outputSize = [math]::Round((Get-Item $OutputPath).Length / 1KB, 2)
        
        Write-ColorOutput "Successfully generated $OutputPath from $InputPath" "Green"
        Write-ColorOutput "File sizes: $InputFile ($inputSize KB) -> $OutputFile ($outputSize KB)" "Cyan"
        Write-ColorOutput "The webpage will now load your updated bookmarks when opened locally." "Green"
        
        return $true
        
    }
    catch {
        Write-ColorOutput "ERROR: $($_.Exception.Message)" "Red"
        Write-ColorOutput "   $($_.Exception.ItemName)" "Yellow"
        return $false
    }
}

function Show-Usage {
    Write-ColorOutput "PowerShell Bookmarks Generator" "Magenta"
    Write-ColorOutput "=================================" "Magenta"
    Write-ColorOutput ""
    Write-ColorOutput "Usage:" "Yellow"
    Write-ColorOutput "  .\Generate-BookmarksJS.ps1                    # Use default files" "White"
    Write-ColorOutput "  .\Generate-BookmarksJS.ps1 -InputFile custom.json" "White"
    Write-ColorOutput "  .\Generate-BookmarksJS.ps1 -OutputFile custom.js" "White"
    Write-ColorOutput ""
    Write-ColorOutput "Parameters:" "Yellow"
    Write-ColorOutput "  -InputFile   : JSON file to read (default: bookmarks.json)" "White"
    Write-ColorOutput "  -OutputFile  : JavaScript file to create (default: bookmarks.js)" "White"
    Write-ColorOutput "  -Help        : Show this help message" "White"
    Write-ColorOutput ""
}

function Get-BookmarkStats {
    param(
        [string]$JsonPath
    )
    
    try {
        $jsonContent = Get-Content -Path $JsonPath -Raw -Encoding UTF8
        $data = $jsonContent | ConvertFrom-Json
        
        $totalBookmarks = 0
        $totalCategories = 0
        
        if ($data.categories) {
            $totalCategories = $data.categories.Count
            foreach ($category in $data.categories) {
                if ($category.bookmarks) {
                    $totalBookmarks += $category.bookmarks.Count
                }
            }
        }
        
        return @{
            Categories = $totalCategories
            Bookmarks = $totalBookmarks
        }
    }
    catch {
        return @{
            Categories = 0
            Bookmarks = 0
        }
    }
}

# Main execution
function Main {
    # Show header
    Write-ColorOutput "Generating bookmarks.js from bookmarks.json..." "Cyan"
    Write-ColorOutput ""
    
    # Resolve full paths
    $inputPath = Resolve-Path $InputFile -ErrorAction SilentlyContinue
    if (-not $inputPath) {
        $inputPath = Join-Path (Get-Location) $InputFile
    }
    
    $outputPath = Join-Path (Get-Location) $OutputFile
    
    # Show file information
    Write-ColorOutput "Input file:  $inputPath" "White"
    Write-ColorOutput "Output file: $outputPath" "White"
    Write-ColorOutput ""
    
    # Generate the JavaScript file
    $success = Generate-BookmarksJS -InputPath $inputPath -OutputPath $outputPath
    
    if ($success) {
        # Show statistics
        $stats = Get-BookmarkStats -JsonPath $inputPath
        Write-ColorOutput ""
        Write-ColorOutput "Bookmark Statistics:" "Yellow"
        Write-ColorOutput "   Categories: $($stats.Categories)" "White"
        Write-ColorOutput "   Bookmarks:  $($stats.Bookmarks)" "White"
        Write-ColorOutput ""
        
        Write-ColorOutput "Next steps:" "Yellow"
        Write-ColorOutput "   1. Open index.html in your web browser" "White"
        Write-ColorOutput "   2. Your updated bookmarks should now be visible" "White"
        Write-ColorOutput "   3. To make further changes, edit $InputFile and run this script again" "White"
        Write-ColorOutput ""
        Write-ColorOutput "Generation completed successfully!" "Green"
    }
    else {
        Write-ColorOutput ""
        Write-ColorOutput "Generation failed. Please fix the errors above and try again." "Red"
        Write-ColorOutput ""
        Write-ColorOutput "Tips:" "Yellow"
        Write-ColorOutput "   - Check that $InputFile exists in the current directory" "White"
        Write-ColorOutput "   - Validate your JSON syntax using an online JSON validator" "White"
        Write-ColorOutput "   - Ensure you have write permissions in the current directory" "White"
        exit 1
    }
}

# Handle help parameter
if ($Help) {
    Show-Usage
    exit 0
}

# Run main function
Main
